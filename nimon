#!/usr/bin/env python3
import skilstak.colors as c
import time
import random
import string
alphabet = list(string.ascii_lowercase + string.ascii_uppercase)
numbers = ['1','2','3','4','5','6','7','8','9']
seq = [random.choice(numbers)]
scores = []
def add_score(score,name):
    score_str = str(score) + ' = ' + str(name)
    scores.append(score_str)
    with open('nimon.txt','w') as f:
        for s in scores:
            f.write(s + '\n')
        f.close()

def get_scores():
    with open('nimon.txt') as f:
        scores = f.read().strip().split('\n')
        f.close()
    high_scores = []
    names = []
    for score in scores:
        num = score.split(' = ')[0]
        name = score.split(' = ')[1]
        high_scores.append(num)
        names.append(name)
    #????
    high_scores.sort(reverse=True)
    print(high_scores)
    return high_scores, names
def game():
    print('HIGHSCORE\n--------------')
    high_scores, names = get_scores()
    score_dict = dict(zip(high_scores[:5], names[:5]))
    for k,v in score_dict.items():
        print(k,v)
    input("""Welc me to nimon (number simon)! This game is similar to the memory game 'simon', in which you press the lights in the order they light up.
    Of course, this game uses numbers instead. When you start the round, a series of numbers will appear, with a letter beside it to tell
    sequences apart. You will input the sequence of numbers that appears, and if you get it right, you will proceed to the next round.
    Remember, it just adds a number on, so you don't have to memorize an entirely new sequence every time!

    Press r to reprint the level
    Press s to add a 10th of a second
    Press f to remove a 10th of a second
    Press a to add a number per iteration (2 numbers at once added, etc.)
    Press x to remove a number per iteration
    
    Press enter to continue\n""")
    level = 1
    #sleep = 0.4
    #at_once = 1
    while True:
        print(c.cl + 'Level',level)
        input('Press enter to start the round\n')
        print(c.cl)
        for position, number in enumerate(seq):
            print(number + '|' + alphabet[position])
            time.sleep(0.4)
            print(c.clear)
        x = input('> ')
        if x == 'hackermode_666_420_mlg_nosescope_dorito_doge_1_2_4_8_16_32_64_128_256_512_1024':
            print(':P')
            seq.append(random.choice(numbers))
            level += 9999
        elif x == 'r':
            continue
        elif x == ''.join(seq):
            print('Well done!')
            time.sleep(0.3)
            seq.append(random.choice(numbers))
            level += 1
        else:
            break
    print('You ending on round',level)
    print('You put ' + x + ' when it was really ' + ''.join(seq))
    return level

def end_game(level, scores):
    if len(scores) > 5:
        worst_highscore = scores[4].split(' = ')[0]
        if level >= worst_highscore:
            print('\nAdd your high score!')
            name = input('Your Name > ')
            add_score(level, name)
    elif len(scores) <= 5:
        print('\nAdd your high score!')
        name = input('Your Name > ')
        add_score(level, name)


try:
    while True:
        level = game()
        scores = get_scores()
        end_game(level, scores)
        again = input('Would you like to play again? y/n > ').lower()
        if again == 'y':
            continue
        elif again == 'n':
            break
            exit()
except KeyboardInterrupt:
    exit()
