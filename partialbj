#!/usr/bin/env python3
import skilstak.colors as c
from time import sleep
from random import shuffle

#originally found at https://github.com/retep-mathwizard/pygame/blob/master/multijack_lib.py
def create_cards():
    suits = ['diamonds', 'clubs', 'hearts', 'spades']
    values = [['ace', 11], ['jack', 10], ['queen', 10], ['king', 10], ['2', 2], ['3', 3], ['4', 4], ['5', 5], ['6', 6], ['7', 7], ['8', 8], ['9', 9], ['10', 10]]
    standard_deck = []
    for card_list in values:
        for suit in suits:
            word = card_list[0] + " of " + suit
            value = card_list[1]
            minilist = [word, value]
            standard_deck.append(minilist)
    return standard_deck


def print_rules():
    print('''{}Objective{}:Get as close to 21 points without going over.
{}How to win{}:Be the closest to 21 points. If you go over, you lose.
{}Point values{}:All cards are worth the value on the card, and face cards are worth 10.
{}Aces{}:Aces can be used as 1 or 11 points.'''.format(c.y, c.x, c.y, c.x, c.y, c.x, c.y, c.x))
    input('Press enter to continue.\n')


def knows_how_to_play():
    answered = False
    while answered is False:
        answer = input('{}{}Does you know how to play blackjack?({}Y{}/{}n{}) > {}'.format(c.x, c.cl, c.g, c.x, c.r, c.x, c.c)).lower().strip()
        if 'y' in answer:
            answered = True
        elif 'n' in answer:
            answered = True
            print_rules()
        else:
            print('{}Invalid. Please say {}yes{} or {}no{}.'.format(c.x, c.g, c.x, c.r, c.x))

def get_two_cards(deck):
    card = deck.pop()
    card2 = deck.pop()
    if 'ace' in card[0] and 'ace' in card2[0]:
        total = 12
    else:
        total = card[1] + card2[1]
    title_one = card[0]
    title_two = card2[0]
    return [title_one, title_two], total, deck
def ask_to_hit(hand, first_time):
    try:
        while True:
            item_string = 'Your hand contains:'
            if first_time is False:
                for item in hand:
                    item_string += item + ' '
                print(item_string)
            want_to_hit = input('Would you like to hit (take another card)? > ' + c.c).strip().lower()
            if 'y' in want_to_hit:
                return True
                break
            elif 'n' in want_to_hit:
                return False
                break
            else:
                print('{}Please type {}yes{} or {}no{}.'.format(c.x, c.g, c.x, c.r, c.x))
    except KeyboardInterrupt:
        print(c.cl)
        exit()
def has_ace(aces):
    has_ace = False
    for ace in aces:
        if ace == 11:
            aces.remove(11)
            aces.append(1)
            has_ace = True
            break
    return has_ace, aces
def get_one_more_card(deck, total):
    card = deck.pop()
    title = card[0]
    total += card[1]
    print('{}Your new card is the {}{}{}. You now have {}{}{} Points.'.format(c.x, c.b, title, c.x, c.m, total, c.x))
    return total, deck, title
def print_hand(hand, total):
    print('Your hand contains the {}{}{} and the {}{}{} for a total of {}{}{} points.'.format(c.b, hand[0], c.x, c.b, hand[1], c.x, c.m, total, c.x))

def handle_betting(first_time, hand, deck, total, aces):
    while True:
        wants_to_hit = ask_to_hit(hand, first_time)
        if wants_to_hit:
            first_time = False
            total, deck, title = get_one_more_card(deck, total)
            if 'ace' in title:
                aces[z].append(11)
            hand.append(title)
            if total > 21:
                has_an_ace, aces = has_ace(aces)
                if has_an_ace is False:
                    print('Oh No! You busted.')
                    sleep(3)
                    break
                else:
                    totals[z] -= 10
                    print(c.x + 'You went over, so your ace valued 11 was changed into a 1.')
                    print('You now have {}{}{} points.'.format(c.b, totals[z], c.x))
        else:
            break
    return hand, deck, total
def get_aces(hand):
    aces = []
    if 'ace' in hand[0]:
        aces.append(11)
    elif 'ace' in hand[1]:
        aces.append(11)
    return aces

input('{}Press{} enter{} to continue.\n'.format(c.x, c.m, c.x))
deck = create_cards()
knows_how_to_play()
hand, total, deck = get_two_cards(deck)
aihand, aitotal, deck = get_two_cards(deck)
ai_aces = get_aces(aihand)
aces = get_aces(hand)
print_hand(hand, total)
hand, deck, total = handle_betting(True, hand, deck, total, aces)
while aitotal > 17:
    card = deck.pop()
    aihand.append(card
    aitotal += 
