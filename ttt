#!/usr/bin/env python3
import skilstak.colors as c
grid = [[' ','1','2','3'],['a',' ',' ',' '],['b',' ',' ',' '],['c',' ',' ',' ']]
min_alpha = ['','a','b','c']
combinations = [['11','12','13'],['21','22','23'],['31','32','33'],['11','21','31'],['12','22','32'],['13','23','33'],['11','22','33'],['13','22','31']]

def get_char(grid, row, col):
    return grid[row][col]

def is_valid(grid,row, col):
    if row in [1,2,3] and col in [1,2,3] and get_char(grid,row,col) not in ['X','0']:
            return True
    return False

def print_grid(grid):
    for row in grid:
        myrow = ''
        for item in row:
            myrow += item + ' '
        print(myrow)
    print('')
def take_turn(character, grid):
    print(c.clear + character + "'s turn\n")
    print_grid(grid)
    while True:
        try:
            line = input('Cell > ')
            coord = list(line)
            try:
                row = min_alpha.index(coord[0])
                col = int(coord[1])
                if is_valid(grid, row, col):
                    grid[row][col] = character
                    break
                else:
                    print('Invalid move.')
                    continue
            except (ValueError, IndexError):
                print('Invalid move.')
        except KeyboardInterrupt:
            exit()
    return grid
def is_winner(character, grid):
    for win_condition in combinations:
        count = 0
        coord_1 = list(win_condition[0])
        coord_2 = list(win_condition[1])
        coord_3 = list(win_condition[2])
        char_1 = grid[int(coord_1[0])][int(coord_1[1])]
        char_2 = grid[int(coord_2[0])][int(coord_2[1])]
        char_3 = grid[int(coord_3[0])][int(coord_3[1])]
        if char_1 == character and char_2 == character and char_3 == character:
            return True
    return False
if __name__ == '__main__':
    while True:
        grid = take_turn('X',grid)
        if is_winner('X',grid) == True or ' ' not in grid:
            print('You win, X!')
            break
        grid = take_turn('0',grid)
        if is_winner('0',grid) == True or ' ' not in grid:
            print('You win, 0!')
            break


